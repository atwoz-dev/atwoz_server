language: ko-KR
tone_instructions: >
  You are a senior software engineer.
  Use original English terms for all technical jargon.
  Be direct and straightforwardâ€”avoid unnecessary phrasing.
  Always maintain a respectful and formal tone, using precise domain terminology.
early_access: true
enable_free_tier: true

reviews:
  profile: chill
  request_changes_workflow: false
  high_level_summary: true
  high_level_summary_placeholder: '@coderabbitai ìš”ì•½'
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: '@coderabbitai'
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: false
  suggested_reviewers: true
  auto_assign_reviewers: true
  poem: false
  labeling_instructions: [ ]
  path_filters: [ ]
  path_instructions:
    - path: "**/*.java"
      instructions: >
        In addition to existing rules, review code based on:
        - Domain-driven design: enforce aggregate boundaries and immutable value objects  
        - Clean code: single responsibility methods, meaningful names, no duplication  
        - Object-oriented programming: SOLID(SRP, OCP, LSP, ISP, DIP) principles

    - path: "**/*.sql"
      instructions: >
        As a team convention, we do not specify FK constraints. Please avoid suggesting adding FK constraints in code reviews.
        For columns used as primary keys (PK) or foreign keys (FK), follow the "bigint" type convention.
        If a column name is "id" or ends with "_id" but is not "bigint", raise a warning with prefix ðŸš¨ðŸš¨ðŸš¨.

    - path: "**/*Controller*.java"
      instructions: >
        Controllers should not contain business logic. Delegate to service layer.
        Review the API endpoints based on this guidelines.
        
        ### Richardson Maturity Model (RMM)
        1. Level 0: Single URI with POST requests for all actions.
        2. Level 1: Separate URIs for individual resources.
        3. Level 2: Use of HTTP methods (GET, POST, PUT, DELETE) to define operations on resources.
        4. Level 3: Hypermedia (HATEOAS) for advanced RESTful APIs.
        
        ### API Conventions
        - URI Rules:
          - Should be intuitive and self-explanatory.
          - Should not map 1:1 to database tables.
          - Must be stateless, with no session state between requests.
          - Include "api" and version in the URI (/api/{version}/resource).
          - Use kebab-case for URIs and camelCase for parameters and body contents.
          - Resource identifiers should be unique and only one per URI path.
        
        - Design Principles:
          - APIs should be designed around resources, which are abstractions rather than direct database tables.
          - Stateless APIs facilitate scalability and flexibility.
          - Clear separation of frontend and backend via URI structure.
          - Versioning in URI paths is preferred for clarity and ease of caching.
          - Maintain consistent naming conventions across the API.
          - Use plural forms for resource names (/users instead of /user).
          - Complex actions can include verbs in the URI (/orders/{orderId}/cancel).
        
        - Implementation Details:
          - Avoid deeply nested resource paths to ensure maintainability.
          - Ensure URIs reflect the data they provide, not the permissions or roles required to access them.
          - Keep URIs simple and predictable, aiding both developers and automated systems.
  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: [ ]
    labels: [ ]
    drafts: true
    base_branches: [ ]

chat:
  auto_reply: true

knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: auto
    project_keys: [ ]
  pull_requests:
    scope: auto